// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/input-output-hk/cicero/src/domain"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// WorkflowRepository is an autogenerated mock type for the WorkflowRepository type
type WorkflowRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *WorkflowRepository) GetAll() ([]*domain.WorkflowInstance, error) {
	ret := _m.Called()

	var r0 []*domain.WorkflowInstance
	if rf, ok := ret.Get(0).(func() []*domain.WorkflowInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.WorkflowInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByName provides a mock function with given fields: _a0
func (_m *WorkflowRepository) GetAllByName(_a0 string) ([]*domain.WorkflowInstance, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.WorkflowInstance
	if rf, ok := ret.Get(0).(func(string) []*domain.WorkflowInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.WorkflowInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *WorkflowRepository) GetById(_a0 uint64) (domain.WorkflowInstance, error) {
	ret := _m.Called(_a0)

	var r0 domain.WorkflowInstance
	if rf, ok := ret.Get(0).(func(uint64) domain.WorkflowInstance); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.WorkflowInstance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSummary provides a mock function with given fields:
func (_m *WorkflowRepository) GetSummary() (domain.WorkflowSummary, error) {
	ret := _m.Called()

	var r0 domain.WorkflowSummary
	if rf, ok := ret.Get(0).(func() domain.WorkflowSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.WorkflowSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *WorkflowRepository) Save(_a0 pgx.Tx, _a1 *domain.WorkflowInstance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, *domain.WorkflowInstance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *WorkflowRepository) Update(_a0 pgx.Tx, _a1 domain.WorkflowInstance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, domain.WorkflowInstance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
