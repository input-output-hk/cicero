// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/nomad/api"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NomadClient is an autogenerated mock type for the NomadClient type
type NomadClient struct {
	mock.Mock
}

// EventStream provides a mock function with given fields: ctx, index
func (_m *NomadClient) EventStream(ctx context.Context, index uint64) (<-chan *api.Events, error) {
	ret := _m.Called(ctx, index)

	var r0 <-chan *api.Events
	if rf, ok := ret.Get(0).(func(context.Context, uint64) <-chan *api.Events); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *api.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobsDeregister provides a mock function with given fields: jobID, purge, q
func (_m *NomadClient) JobsDeregister(jobID string, purge bool, q *api.WriteOptions) (string, *api.WriteMeta, error) {
	ret := _m.Called(jobID, purge, q)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, bool, *api.WriteOptions) string); ok {
		r0 = rf(jobID, purge, q)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *api.WriteMeta
	if rf, ok := ret.Get(1).(func(string, bool, *api.WriteOptions) *api.WriteMeta); ok {
		r1 = rf(jobID, purge, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.WriteMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, bool, *api.WriteOptions) error); ok {
		r2 = rf(jobID, purge, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobsRegister provides a mock function with given fields: job, q
func (_m *NomadClient) JobsRegister(job *api.Job, q *api.WriteOptions) (*api.JobRegisterResponse, *api.WriteMeta, error) {
	ret := _m.Called(job, q)

	var r0 *api.JobRegisterResponse
	if rf, ok := ret.Get(0).(func(*api.Job, *api.WriteOptions) *api.JobRegisterResponse); ok {
		r0 = rf(job, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.JobRegisterResponse)
		}
	}

	var r1 *api.WriteMeta
	if rf, ok := ret.Get(1).(func(*api.Job, *api.WriteOptions) *api.WriteMeta); ok {
		r1 = rf(job, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.WriteMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*api.Job, *api.WriteOptions) error); ok {
		r2 = rf(job, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
