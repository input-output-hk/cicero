// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/input-output-hk/cicero/src/domain"
	liftbridge "github.com/liftbridge-io/go-liftbridge/v2"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// MessageQueueService is an autogenerated mock type for the MessageQueueService type
type MessageQueueService struct {
	mock.Mock
}

// BuildMessage provides a mock function with given fields: _a0, _a1
func (_m *MessageQueueService) BuildMessage(_a0 string, _a1 []byte) liftbridge.MessageOption {
	ret := _m.Called(_a0, _a1)

	var r0 liftbridge.MessageOption
	if rf, ok := ret.Get(0).(func(string, []byte) liftbridge.MessageOption); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(liftbridge.MessageOption)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MessageQueueService) Publish(_a0 string, _a1 domain.StreamName, _a2 domain.Facts, _a3 ...liftbridge.MessageOption) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.StreamName, domain.Facts, ...liftbridge.MessageOption) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MessageQueueService) Save(_a0 pgx.Tx, _a1 *liftbridge.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, *liftbridge.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MessageQueueService) Subscribe(_a0 context.Context, _a1 domain.StreamName, _a2 liftbridge.Handler, _a3 int32) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StreamName, liftbridge.Handler, int32) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
